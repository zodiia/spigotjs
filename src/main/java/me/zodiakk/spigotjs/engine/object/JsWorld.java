package me.zodiakk.spigotjs.engine.object;

public interface JsWorld extends ApiElement {
    public boolean          canGenerateStructures();
    public boolean          createExplosion(Number x, Number y, Number z, Number power);
    public boolean          createExplosion(Number x, Number y, Number z, Number power, Boolean setFire);
    public boolean          createExplosion(Number x, Number y, Number z, Number power, Boolean setFire, Boolean breakBlocks);
    public boolean          createExplosion(Number x, Number y, Number z, Number power, Boolean setFire, Boolean breakBlocks, JsEntity source);
    public boolean          createExplosion(JsLocation location, Number power);
    public boolean          createExplosion(JsLocation location, Number power, Boolean setFire);
    public boolean          createExplosion(JsLocation location, Number power, Boolean setFire, Boolean breakBlocks);
    public boolean          createExplosion(JsLocation location, Number power, Boolean setFire, Boolean breakBlocks, JsEntity source);
    public void             dropItem(JsLocation location, JsItemStack item);
    public void             dropItemNaturally(JsLocation location, JsItemStack item);
    public boolean          generateTree(JsLocation location, String treeType);
    public boolean          getAllowAnimals();
    public boolean          getAllowMonsters();
    public int              getAmbientSpawnLimit();
    public int              getAnimalSpawnLimit();
    public String           getBiome(Number x, Number y, Number z);
    public String           getBiome(JsLocation location);
    public JsBlock          getBlock(Number x, Number y, Number z);
    public JsBlock          getBlock(JsLocation location);
    public String           getDifficulty();
    public JsEntity[]       getEntities();
    public JsEntity[]       getEntities(String type);
    public JsEntity[]       getEntities(String[] types);
    public String           getEnvironment();
    public Number           getFullTime();
    public String[]         getGameRules();
    public String           getGameRule(String value);
    public JsBlock          getHighestBlockAt(Number x, Number z);
    public JsBlock          getHighestBlockAt(JsLocation location);
    public Number           getHighestBlockYAt(Number x, Number z);
    public Number           getHighestBlockYAt(JsLocation location);
    public Number           getHumidity(Number x, Number y, Number z);
    public Number           getHumidity(JsLocation location);
    public boolean          getKeepSpawnInMemory();
    public JsLivingEntity[] getLivingEntities();
    public Number           getMaxHeight();
    public Number           getMonsterSpawnLimit();
    public String           getName();
    public JsEntity[]       getNearbyEntities(JsLocation location, Number x, Number y, Number z);
    public JsEntity[]       getNearbyEntities(JsLocation location, Number distance);
    public JsPlayer[]       getPlayers();
    public boolean          getPvp();
    public Number           getSeaLevel();
    public Number           getSeed();
    public JsLocation       getSpawnLocation();
    public Number           getTemperature(Number x, Number y, Number z);
    public Number           getTemperature(JsLocation location);
    public Number           getThunderDuration();
    public Number           getTicksPerAmbientSpawns();
    public Number           getTicksPerAnimalSpawns();
    public Number           getTicksPerMonsterSpawns();
    public Number           getTicksPerWaterAmbientSpawns();
    public Number           getTicksPerWaterSpawns();
    public Number           getTime();
    public String           getId();
    public Number           getWaterAmbientSpawnLimit();
    public Number           getWaterSpawnLimit();
    public Number           getWeatherDuration();
    public boolean          hasStorm();
    public boolean          hasAutoSave();
    public boolean          isGameRule(String gameRule);
    public boolean          isThundering();
    public void             loadChunk(Number chunkX, Number chunkZ);
    public void             loadChunk(Number chunkX, Number chunkZ, Boolean generate);
    public void             playSound(JsLocation location, String sound, Number volume, Number pitch);
    public void             playSound(JsLocation location, String sound, String category, Number volume, Number pitch);
    public boolean          regenerateChunk(Number chunkX, Number chunkZ);
    public void             save();
    public void             setAmbientSpawnLimit(Number limit);
    public void             setAnimalSpawnLimit(Number limit);
    public void             setAutoSave(Boolean value);
    public void             setBiome(Number x, Number y, Number z, String biome);
    public void             setBiome(JsLocation location, String biome);
    public void             setDifficulty(String difficulty);
    public void             setFullTime(Number time);
    public void             setGameRule(String rule, String value);
    public void             setKeepSpawnInMemory(Boolean keepLoaded);
    public void             setMonsterSpawnLimit(Number limit);
    public void             setPvp(Boolean pvp);
    public void             setSpawnFlags(Boolean allowMonsters, Boolean allowAnimals);
    public boolean          setSpawnLocation(Number x, Number y, Number z);
    public boolean          setSpawnLocation(JsLocation location);
    public void             setStorm(Boolean hasStorm);
    public void             setThunderDuration(Number duration);
    public void             setThundering(Boolean thundering);
    public void             setTicksPerAmbientSpawn(Number ticks);
    public void             setTicksPerAnimalSpawn(Number ticks);
    public void             setTicksPerMonsterSpawn(Number ticks);
    public void             setTicksPerWaterAmbientSpawn(Number ticks);
    public void             setTicksPerWaterSpawn(Number ticks);
    public void             setTime(Number time);
    public void             setWaterAmbientSpawnLimit(Number limit);
    public void             setWaterSpawnLimit(Number limit);
    public void             setWeatherDuration(Number duration);
    public JsEntity         spawnEntity(Number x, Number y, Number z, String entityType);
    public JsEntity         spawnEntity(JsLocation location, String entityType);
    public void             spawnArrow(JsLocation location, Number velocityX, Number velocityY, Number velocityZ, Number speed, Number spread);
    public void             strikeLightning(Number x, Number y, Number z);
    public void             strikeLightning(JsLocation location);
    public void             strikeLightningEffect(Number x, Number y, Number z);
    public void             strikeLightningEffect(JsLocation location);
    public boolean          unloadChunk(Number chunkX, Number chunkZ);
    public boolean          unloadChunk(Number chunkX, Number chunkZ, Boolean save);
    public boolean          unloadChunkRequest(Number chunkX, Number chunkZ);
}
